Venue has room
Room is in venue
Meeting programs are in room
Meeting is in Venue

RULES:
Meetings cannot overlap in Venue

Overlap:

Venue GreatVenue
Meeting Awesome is in GreatVenue at Noon til 2PM
Meeting BetterOne in GreatVenue at Noon til 5PM

3 most important things:

1. Rules 
2. Behaviour
3. Information

Behaviours:
- organizers should be able too book venue for meetings

Information:
- Meeting details? - meeting duration
- Venue availability


How close conceptually are Meetings and Venues?
How close different concepts in the problem space are?


what happens when the meeting is rescheduled?

TODO: next week

TRY!! (Yoda wouldn't like this...) to reschedule the meeting

pros & cons of different approaches


QUESTION:
    1. where do Meetings come from? How is the system expected to work? Context: Is Meeting as such external to the 
    Venue? i.e. do we need to support Meeting relocating as well as rescheduling? I'm guessing at some point probably 
    yes, but does it affect the design right now? Is it too soon to think of it now?
    2. at this point, we have a lot going on - creating meetings, rescheduling them, booking venues, rescheduling in 
    respect to the venue, and possibly relocating as well. A good part of this evolved and came to be over time. How 
    likely are we to come up with this design (or something very similar to it) if we knew all of the currently know 
    requirements at the project start? If all the exercise documents 1-6 and additional ones were one SRS document, would we have come to 
    this design? Or would it change the way we think and possibly assign responsibility to some of our objects?
    3. if this were all in one SRS, and multiple people were tasked to work on this project, how would we organize work?
     Most likely developers would recognize different objects / concepts involved in this - meeting, scheduling, venue, 
     etc, divide the tasks among themselves and start working on them individually. That would probably lead to a design
     that's very different than the one we came up with. 
    4. Modelling exercise - estudent Project & it's navigation items


Venue has a different lifecycle than the meeting - different things happen to it than to the Meeting

IRL venue probably wouldn't be the aggregate holding the meetings.

event sourcing performance issues are a good indicator of too large of an aggregate, holding too many events. 
Re-instantiating the aggregate takes time and resources if the history is too big


/////
aggregate versions vs referencing versions

Aggregate approach:
- put venue into the meeting
- put meeting into the venue
- create a 3rd resource - Booking - joining the venue w/ the meeting

Aggregates: 
1. Venue:
Venue -> Meeting
2. Meeting:
Meeting -> Venue
3. Booking:
Venue <- Booking -> Meeting


PROs & CONs:
1. Venue
 - holding a list of all the booked meetings allows to more easily perform the check for venue availability for
  desired date
 - has potential to grow very large in number of meetings, making it slow to check for availability (3 meetings per 
 weekend X 52 weekends per year X 10 years = 1560 meetings in 10 years; every meeting has LOADS of it's internal data)
2. Meeting
 - it would be very hard to check for availability of a venue, since the venue wouldn't know anything about it's
  booked terms; we'd need to have some kind of service that would load ALL the meetings and go through them one by
  one, and check if the desired venue is available for the targeted date
3. Booking
  - holds both Venue and Meeting
  - in order to book a Venue, we'd need to load all the Bookings and search through them and check if the venue is 
  available
  - if a Booking holds a list of all reservations for all venues and all their meetings, we'd still have to load 
  everything and check if the venue is available
  
Referencing approach
Reference Meeting from Venue
 - same as having Venue as aggregate, only less data is saved/loaded
Reference Venue from Meeting
 - same as having Meeting as aggregate, less data is saved/loaded
Create Booking entity, which holds references to both Venue and Meeting
 - same as the Booking aggregate version, only less data involved
 
 
Possible solutions:
- Venue holds a list of Meeting IDs and currently booked date range
- Booking holds references to Venue and Meeting, with booking range

next week
at least 2 services & in-memory repositories, tests would be nice

need to:
- book a venue
- reschedule a meeting (same rule as before - no conflicting w/ other meeting inside the same venue)


services are cross-concern software

QUESTIONS & COMMENTS:

QUESTION: 
 Are commands & handlers application or domain services? They're dealing with venue booking (and soon with
 rescheduling) and these are domain concepts. Just because we're not implementing this behaviour in the aggregates 
 and entities doesn't meant that it's not related to the domain.

TODO: it's becoming a bit crowded in here. We should start organizing the code into
 sub-directories and introduce some kind of structure

QUESTION: RESOLVED
 command validation - BookVenueCommand takes 2 arguments that represent time points. If commands should be
 constructed from primitives only, how, where, and when should we make sure the command data is correct?
 ANSWER: NO; because commands can be processed in async by an outside system. That's why all elements need to be 
 primitives. An outside system (non-php) that's processing commands might not have the same support for date time 
 string format as php does. By validating that the command attributes conform to some structure that only relevant 
 to php itself could prevent a command from being instantiated, regardless of the other system's ability to process 
 such data. Command handlers should validate command data, but not commands themselves.

TODO: had to add a getter to some entities to expose ID values that are used in those entities' repositories
